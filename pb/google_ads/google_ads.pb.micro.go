// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: services/google_ads/pb/google_ads/google_ads.proto

package google_ads

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for GoogleAds service

func NewGoogleAdsEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for GoogleAds service

type GoogleAdsService interface {
	SyncCampaigns(ctx context.Context, in *SyncCampaignsRequest, opts ...client.CallOption) (*TaskIdentifier, error)
	UpdateTokenForBrandId(ctx context.Context, in *UpdateTokenForBrandIdRequest, opts ...client.CallOption) (*UpdateTokenForBrandIdResponse, error)
	SyncCampaignCriteria(ctx context.Context, in *SyncCampaignCriteriaRequest, opts ...client.CallOption) (*TaskIdentifier, error)
	SyncAdGroupCriteria(ctx context.Context, in *SyncAdGroupRequest, opts ...client.CallOption) (*TaskIdentifier, error)
}

type googleAdsService struct {
	c    client.Client
	name string
}

func NewGoogleAdsService(name string, c client.Client) GoogleAdsService {
	return &googleAdsService{
		c:    c,
		name: name,
	}
}

func (c *googleAdsService) SyncCampaigns(ctx context.Context, in *SyncCampaignsRequest, opts ...client.CallOption) (*TaskIdentifier, error) {
	req := c.c.NewRequest(c.name, "GoogleAds.SyncCampaigns", in)
	out := new(TaskIdentifier)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *googleAdsService) UpdateTokenForBrandId(ctx context.Context, in *UpdateTokenForBrandIdRequest, opts ...client.CallOption) (*UpdateTokenForBrandIdResponse, error) {
	req := c.c.NewRequest(c.name, "GoogleAds.UpdateTokenForBrandId", in)
	out := new(UpdateTokenForBrandIdResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *googleAdsService) SyncCampaignCriteria(ctx context.Context, in *SyncCampaignCriteriaRequest, opts ...client.CallOption) (*TaskIdentifier, error) {
	req := c.c.NewRequest(c.name, "GoogleAds.SyncCampaignCriteria", in)
	out := new(TaskIdentifier)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *googleAdsService) SyncAdGroupCriteria(ctx context.Context, in *SyncAdGroupRequest, opts ...client.CallOption) (*TaskIdentifier, error) {
	req := c.c.NewRequest(c.name, "GoogleAds.SyncAdGroupCriteria", in)
	out := new(TaskIdentifier)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for GoogleAds service

type GoogleAdsHandler interface {
	SyncCampaigns(context.Context, *SyncCampaignsRequest, *TaskIdentifier) error
	UpdateTokenForBrandId(context.Context, *UpdateTokenForBrandIdRequest, *UpdateTokenForBrandIdResponse) error
	SyncCampaignCriteria(context.Context, *SyncCampaignCriteriaRequest, *TaskIdentifier) error
	SyncAdGroupCriteria(context.Context, *SyncAdGroupRequest, *TaskIdentifier) error
}

func RegisterGoogleAdsHandler(s server.Server, hdlr GoogleAdsHandler, opts ...server.HandlerOption) error {
	type googleAds interface {
		SyncCampaigns(ctx context.Context, in *SyncCampaignsRequest, out *TaskIdentifier) error
		UpdateTokenForBrandId(ctx context.Context, in *UpdateTokenForBrandIdRequest, out *UpdateTokenForBrandIdResponse) error
		SyncCampaignCriteria(ctx context.Context, in *SyncCampaignCriteriaRequest, out *TaskIdentifier) error
		SyncAdGroupCriteria(ctx context.Context, in *SyncAdGroupRequest, out *TaskIdentifier) error
	}
	type GoogleAds struct {
		googleAds
	}
	h := &googleAdsHandler{hdlr}
	return s.Handle(s.NewHandler(&GoogleAds{h}, opts...))
}

type googleAdsHandler struct {
	GoogleAdsHandler
}

func (h *googleAdsHandler) SyncCampaigns(ctx context.Context, in *SyncCampaignsRequest, out *TaskIdentifier) error {
	return h.GoogleAdsHandler.SyncCampaigns(ctx, in, out)
}

func (h *googleAdsHandler) UpdateTokenForBrandId(ctx context.Context, in *UpdateTokenForBrandIdRequest, out *UpdateTokenForBrandIdResponse) error {
	return h.GoogleAdsHandler.UpdateTokenForBrandId(ctx, in, out)
}

func (h *googleAdsHandler) SyncCampaignCriteria(ctx context.Context, in *SyncCampaignCriteriaRequest, out *TaskIdentifier) error {
	return h.GoogleAdsHandler.SyncCampaignCriteria(ctx, in, out)
}

func (h *googleAdsHandler) SyncAdGroupCriteria(ctx context.Context, in *SyncAdGroupRequest, out *TaskIdentifier) error {
	return h.GoogleAdsHandler.SyncAdGroupCriteria(ctx, in, out)
}
